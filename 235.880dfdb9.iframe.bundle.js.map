{"version":3,"file":"235.880dfdb9.iframe.bundle.js","mappings":";;;AAYA;;;;;;;;;;;;;AAaA;AACA;;;AAGA;AACA;;;;;;;AAOA;AACA;;;AAGA;AACA;;;;AAMA;;;;;;AASA;;;;;;;;;;;ACjCA;AACA;AAGA;AACA;AAEA;;;;ACdA;;;;ACHA;;;ACGA;;;AAIA;;;;;;;ACEA;;;;;;;ACDA;;;;;;;;ACJA;;ACAA;;;;;;;ACAA;;AAEA;AAGA;AACA;;;AAIA;;;;ACVA;;;;;;;;;;;;;;;;AAkBA;;;;;;AAMA;;;;AAKA;ACtCA;AACA;;;;;;;;AAUA;;;;AAKA;;AAIA;;;;;;AAMA;;;;;;;;AAUA;;;;;AAOA;;;;AAMA;;;;;AAKA;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA","sources":["webpack://@fjdr/react-diagrams-gallery/./demos/helpers/DemoCanvasWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../../src/entities/layer/TransformLayerWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../../src/entities/canvas/CanvasWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../../src/entities/selection/SelectionBoxWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../../src/entities/label/LabelWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../../src/entities/node/NodeWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../../src/entities/group/GroupWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../src/label/DefaultLabelWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../src/link/DefaultLinkPointWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../src/link/DefaultLinkFactory.tsx","webpack://@fjdr/react-diagrams-gallery/../../src/port/DefaultPortLabelWidget.tsx","webpack://@fjdr/react-diagrams-gallery/../../src/node/DefaultNodeWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css, Global } from '@emotion/react';\n\nexport interface DemoCanvasWidgetProps {\n\tcolor?: string;\n\tbackground?: string;\n}\n\nnamespace S {\n\texport const Container = styled.div<{ color: string; background: string }>`\n\t\theight: 100%;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n\n\texport const Expand = css`\n\t\thtml,\n\t\tbody,\n\t\t#root {\n\t\t\theight: 100%;\n\t\t}\n\t`;\n}\n\nexport class DemoCanvasWidget extends React.Component<React.PropsWithChildren<DemoCanvasWidgetProps>> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Global styles={S.Expand} />\n\t\t\t\t<S.Container\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}\n\t\t\t\t>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</S.Container>\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { CSSProperties } from 'react';\nimport { LayerModel } from './LayerModel';\nimport { css } from '@emotion/react';\n\nexport interface TransformLayerWidgetProps {\n\tlayer: LayerModel;\n}\n\nnamespace S {\n\tconst shared = css`\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tposition: absolute;\n\t\tpointer-events: none;\n\t\ttransform-origin: 0 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t`;\n\n\texport const DivLayer = styled.div`\n\t\t${shared}\n\t`;\n\n\texport const SvgLayer = styled.svg`\n\t\t${shared}\n\t`;\n}\n\nexport class TransformLayerWidget extends React.Component<React.PropsWithChildren<TransformLayerWidgetProps>> {\n\tconstructor(props: TransformLayerWidgetProps) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t}\n\n\tgetTransform() {\n\t\tconst model = this.props.layer.getParent();\n\t\treturn `\n\t\t\ttranslate(\n\t\t\t\t${model.getOffsetX()}px,\n\t\t\t\t${model.getOffsetY()}px)\n\t\t\tscale(\n\t\t\t\t${model.getZoomLevel() / 100.0}\n\t\t\t)\n  \t`;\n\t}\n\n\tgetTransformStyle(): CSSProperties {\n\t\tif (this.props.layer.getOptions().transformed) {\n\t\t\treturn {\n\t\t\t\ttransform: this.getTransform()\n\t\t\t};\n\t\t}\n\t\treturn {};\n\t}\n\n\trender() {\n\t\tif (this.props.layer.getOptions().isSvg) {\n\t\t\treturn <S.SvgLayer style={this.getTransformStyle()}>{this.props.children}</S.SvgLayer>;\n\t\t}\n\t\treturn <S.DivLayer style={this.getTransformStyle()}>{this.props.children}</S.DivLayer>;\n\t}\n}\n","import * as React from 'react';\nimport { CanvasEngine } from '../../CanvasEngine';\nimport { TransformLayerWidget } from '../layer/TransformLayerWidget';\nimport styled from '@emotion/styled';\nimport { SmartLayerWidget } from '../layer/SmartLayerWidget';\n\nexport interface DiagramProps {\n\tengine: CanvasEngine;\n\tclassName?: string;\n}\n\nnamespace S {\n\texport const Canvas = styled.div`\n\t\tposition: relative;\n\t\tcursor: move;\n\t\toverflow: hidden;\n\t`;\n}\n\nexport class CanvasWidget extends React.Component<DiagramProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\tkeyUp: any;\n\tkeyDown: any;\n\tcanvasListener: any;\n\n\tconstructor(props: DiagramProps) {\n\t\tsuper(props);\n\n\t\tthis.ref = React.createRef();\n\t\tthis.state = {\n\t\t\taction: null,\n\t\t\tdiagramEngineListener: null\n\t\t};\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.props.engine.deregisterListener(this.canvasListener);\n\t\tthis.props.engine.setCanvas(null);\n\n\t\tdocument.removeEventListener('keyup', this.keyUp);\n\t\tdocument.removeEventListener('keydown', this.keyDown);\n\t}\n\n\tregisterCanvas() {\n\t\tthis.props.engine.setCanvas(this.ref.current);\n\t\tthis.props.engine.iterateListeners((list) => {\n\t\t\tlist.rendered && list.rendered();\n\t\t});\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.registerCanvas();\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.canvasListener = this.props.engine.registerListener({\n\t\t\trepaintCanvas: () => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\n\t\tthis.keyDown = (event) => {\n\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t};\n\t\tthis.keyUp = (event) => {\n\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t};\n\n\t\tdocument.addEventListener('keyup', this.keyUp);\n\t\tdocument.addEventListener('keydown', this.keyDown);\n\t\tthis.registerCanvas();\n\t}\n\n\trender() {\n\t\tconst engine = this.props.engine;\n\t\tconst model = engine.getModel();\n\n\t\tconst orderedLayers = model.getLayers().sort((a, b) => {\n\t\t\tconst order = {\n\t\t\t\t'diagram-groups': 1,\n\t\t\t\t'diagram-links': 2,\n\t\t\t\t'diagram-nodes': 3\n\t\t\t};\n\t\t\treturn order[a.getType()] - order[b.getType()];\n\t\t});\n\n\t\treturn (\n\t\t\t<S.Canvas\n\t\t\t\tclassName={this.props.className}\n\t\t\t\tref={this.ref}\n\t\t\t\tonWheel={(event) => {\n\t\t\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t\t\t}}\n\t\t\t\tonMouseDown={(event) => {\n\t\t\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t\t\t}}\n\t\t\t\tonMouseUp={(event) => {\n\t\t\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t\t\t}}\n\t\t\t\tonMouseMove={(event) => {\n\t\t\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t\t\t}}\n\t\t\t\tonTouchStart={(event) => {\n\t\t\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t\t\t}}\n\t\t\t\tonTouchEnd={(event) => {\n\t\t\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t\t\t}}\n\t\t\t\tonTouchMove={(event) => {\n\t\t\t\t\tthis.props.engine.getActionEventBus().fireAction({ event });\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{orderedLayers.map((layer) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<TransformLayerWidget layer={layer} key={layer.getID()}>\n\t\t\t\t\t\t\t<SmartLayerWidget layer={layer} engine={this.props.engine} key={layer.getID()} />\n\t\t\t\t\t\t</TransformLayerWidget>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</S.Canvas>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { SimpleClientRect } from '../../states/SelectionBoxState';\n\nexport interface SelectionBoxWidgetProps {\n\trect: SimpleClientRect;\n}\n\nnamespace S {\n\texport const Container = styled.div`\n\t\tposition: absolute;\n\t\tbackground-color: rgba(0, 192, 255, 0.2);\n\t\tborder: solid 2px rgb(0, 192, 255);\n\t`;\n}\n\nexport class SelectionBoxWidget extends React.Component<SelectionBoxWidgetProps> {\n\trender() {\n\t\tconst { rect } = this.props;\n\n\t\tif (!rect) return null;\n\n\t\treturn (\n\t\t\t<S.Container\n\t\t\t\tstyle={{\n\t\t\t\t\ttop: rect.top,\n\t\t\t\t\tleft: rect.left,\n\t\t\t\t\twidth: rect.width,\n\t\t\t\t\theight: rect.height\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { LabelModel } from './LabelModel';\nimport styled from '@emotion/styled';\n\nexport interface LabelWidgetProps {\n\tengine: DiagramEngine;\n\tlabel: LabelModel;\n\tindex: number;\n}\n\nnamespace S {\n\texport const Label = styled.div`\n\t\tdisplay: inline-block;\n\t\tposition: absolute;\n\t`;\n\n\texport const Foreign = styled.foreignObject`\n\t\tpointer-events: none;\n\t\toverflow: visible;\n\t`;\n}\n\nexport class LabelWidget extends React.Component<LabelWidgetProps> {\n\tref: React.RefObject<HTMLDivElement>;\n\n\tconstructor(props: LabelWidgetProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentDidUpdate() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.requestAnimationFrame(this.calculateLabelPosition);\n\t}\n\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: SVGPathElement; position: number } => {\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n\t\tconst link = this.props.label.getParent();\n\t\tconst lengths = link.getRenderedPath().map((path) => path.getTotalLength());\n\n\t\t// calculate the point where we want to display the label\n\t\tlet labelPosition =\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n\t\t\t(index / (link.getLabels().length + 1));\n\n\t\t// find the path where the label will be rendered and calculate the relative position\n\t\tlet pathIndex = 0;\n\t\twhile (pathIndex < link.getRenderedPath().length) {\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\n\t\t\t\treturn {\n\t\t\t\t\tpath: link.getRenderedPath()[pathIndex],\n\t\t\t\t\tposition: labelPosition\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// keep searching\n\t\t\tlabelPosition -= lengths[pathIndex];\n\t\t\tpathIndex++;\n\t\t}\n\t};\n\n\tcalculateLabelPosition = () => {\n\t\tconst found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n\t\tif (!found) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { path, position } = found;\n\n\t\tconst labelDimensions = {\n\t\t\twidth: this.ref.current.offsetWidth,\n\t\t\theight: this.ref.current.offsetHeight\n\t\t};\n\n\t\tconst pathCentre = path.getPointAtLength(position);\n\n\t\tconst labelCoordinates = {\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n\t\t};\n\n\t\tthis.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n\t};\n\n\trender() {\n\t\tconst canvas = this.props.engine.getCanvas();\n\n\t\treturn (\n\t\t\t<S.Foreign key={this.props.label.getID()} width={canvas?.offsetWidth} height={canvas?.offsetHeight}>\n\t\t\t\t<S.Label ref={this.ref}>\n\t\t\t\t\t{this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({ model: this.props.label })}\n\t\t\t\t</S.Label>\n\t\t\t</S.Foreign>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport _forEach from 'lodash/forEach';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { NodeModel } from './NodeModel';\nimport { BaseEntityEvent, BaseModel, ListenerHandle, PeformanceWidget } from '@fjdr/react-canvas-core';\nimport styled from '@emotion/styled';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport interface NodeProps {\n\tnode: NodeModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\n\nnamespace S {\n\texport const Node = styled.div`\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n}\n\nexport class NodeWidget extends React.Component<NodeProps> {\n\tob: any;\n\tref: React.RefObject<HTMLDivElement>;\n\tlistener: ListenerHandle;\n\n\tconstructor(props: NodeProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.ob.disconnect();\n\t\tthis.ob = null;\n\n\t\tthis.listener?.deregister();\n\t\tthis.listener = null;\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<NodeProps>, prevState: Readonly<any>, snapshot?: any): void {\n\t\tif (this.listener && this.props.node !== prevProps.node) {\n\t\t\tthis.listener.deregister();\n\t\t\tthis.installSelectionListener();\n\t\t}\n\t}\n\n\tinstallSelectionListener() {\n\t\tthis.listener = this.props.node.registerListener({\n\t\t\tselectionChanged: (event: BaseEntityEvent<BaseModel> & { isSelected: boolean }) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateSize(width: number, height: number) {\n\t\tthis.props.node.updateDimensions({ width, height });\n\n\t\t//now mark the links as dirty\n\t\ttry {\n\t\t\t_forEach(this.props.node.getPorts(), (port) => {\n\t\t\t\tport.updateCoords(this.props.diagramEngine.getPortCoords(port));\n\t\t\t});\n\t\t} catch (ex) {}\n\t}\n\n\tcomponentDidMount(): void {\n\t\t// @ts-ignore\n\t\tthis.ob = new ResizeObserver((entities) => {\n\t\t\tconst bounds = entities[0].contentRect;\n\t\t\tthis.updateSize(bounds.width, bounds.height);\n\t\t});\n\n\t\tconst b = this.ref.current.getBoundingClientRect();\n\t\tthis.updateSize(b.width, b.height);\n\t\tthis.ob.observe(this.ref.current);\n\t\tthis.installSelectionListener();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.node} serialized={this.props.node.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<S.Node\n\t\t\t\t\t\t\tclassName=\"node\"\n\t\t\t\t\t\t\tref={this.ref}\n\t\t\t\t\t\t\tdata-nodeid={this.props.node.getID()}\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttop: this.props.node.getY(),\n\t\t\t\t\t\t\t\tleft: this.props.node.getX()\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForNode(this.props.node)}\n\t\t\t\t\t\t</S.Node>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport _forEach from 'lodash/forEach';\nimport { DiagramEngine } from '../../DiagramEngine';\nimport { GroupModel } from './GroupModel';\nimport { BaseEntityEvent, BaseModel, ListenerHandle, PeformanceWidget } from '@fjdr/react-canvas-core';\nimport styled from '@emotion/styled';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nexport interface GroupProps {\n\tgroup: GroupModel;\n\tchildren?: any;\n\tdiagramEngine: DiagramEngine;\n}\nnamespace S {\n\texport const Group = styled.div`\n\t\tposition: absolute;\n\t\t-webkit-touch-callout: none; /* iOS Safari */\n\t\t-webkit-user-select: none; /* Chrome/Safari/Opera */\n\t\tuser-select: none;\n\t\tcursor: move;\n\t\tpointer-events: all;\n\t`;\n}\n\nexport class GroupWidget extends React.Component<GroupProps> {\n\tob: any;\n\tref: React.RefObject<HTMLDivElement>;\n\tlistener: ListenerHandle;\n\n\tconstructor(props: GroupProps) {\n\t\tsuper(props);\n\t\tthis.ref = React.createRef();\n\t}\n\n\tcomponentWillUnmount(): void {\n\t\tthis.listener?.deregister();\n\t\tthis.listener = null;\n\t}\n\n\tcomponentDidUpdate(prevProps: Readonly<GroupProps>, prevState: Readonly<any>, snapshot?: any): void {\n\t\tif (this.listener && this.props.group !== prevProps.group) {\n\t\t\tthis.listener.deregister();\n\t\t\tthis.installSelectionListener();\n\t\t}\n\t}\n\n\tinstallSelectionListener() {\n\t\tthis.listener = this.props.group.registerListener({\n\t\t\tselectionChanged: (event: BaseEntityEvent<BaseModel> & { isSelected: boolean }) => {\n\t\t\t\tthis.forceUpdate();\n\t\t\t}\n\t\t});\n\t}\n\trender() {\n\t\tconst { group } = this.props;\n\n\t\t// Tính toán vị trí góc trên bên trái\n\t\tconst topLeftX = group.getPosition().x - group.getSize().width / 2;\n\t\tconst topLeftY = group.getPosition().y - group.getSize().height / 2;\n\n\t\treturn (\n\t\t\t<PeformanceWidget model={this.props.group} serialized={this.props.group.serialize()}>\n\t\t\t\t{() => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<g data-groupid={this.props.group.getID()} transform={`translate(${topLeftX}, ${topLeftY})`}>\n\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\twidth={this.props.group.getSize().width + 20}\n\t\t\t\t\t\t\t\theight={this.props.group.getSize().height}\n\t\t\t\t\t\t\t\tfill=\"transparent\"\n\t\t\t\t\t\t\t\tfillOpacity={0.1}\n\t\t\t\t\t\t\t\tstroke=\"transparent\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{this.props.diagramEngine.generateWidgetForGroup(this.props.group)}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t);\n\t\t\t\t}}\n\t\t\t</PeformanceWidget>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DefaultLabelModel } from './DefaultLabelModel';\nimport styled from '@emotion/styled';\n\nexport interface DefaultLabelWidgetProps {\n\tmodel: DefaultLabelModel;\n}\n\nnamespace S {\n\texport const Label = styled.div`\n\t\tbackground: rgba(0, 0, 0, 0.8);\n\t\tborder-radius: 5px;\n\t\tcolor: white;\n\t\tfont-size: 12px;\n\t\tpadding: 4px 8px;\n\t\tfont-family: sans-serif;\n\t\tuser-select: none;\n\t`;\n}\n\nexport class DefaultLabelWidget extends React.Component<DefaultLabelWidgetProps> {\n\trender() {\n\t\treturn <S.Label>{this.props.model.getOptions().label}</S.Label>;\n\t}\n}\n","import * as React from 'react';\nimport { PointModel } from '@thanhdv98/react-diagrams-core';\nimport styled from '@emotion/styled';\n\nexport interface DefaultLinkPointWidgetProps {\n\tpoint: PointModel;\n\tcolor?: string;\n\tcolorSelected: string;\n}\n\nexport interface DefaultLinkPointWidgetState {\n\tselected: boolean;\n}\n\nnamespace S {\n\texport const PointTop = styled.circle`\n\t\tpointer-events: all;\n\t`;\n}\n\nexport class DefaultLinkPointWidget extends React.Component<DefaultLinkPointWidgetProps, DefaultLinkPointWidgetState> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselected: false\n\t\t};\n\t}\n\n\trender() {\n\t\tconst { point } = this.props;\n\t\treturn (\n\t\t\t<g>\n\t\t\t\t<circle\n\t\t\t\t\tcx={point.getPosition().x}\n\t\t\t\t\tcy={point.getPosition().y}\n\t\t\t\t\tr={5}\n\t\t\t\t\tfill={this.state.selected || this.props.point.isSelected() ? this.props.colorSelected : this.props.color}\n\t\t\t\t/>\n\t\t\t\t<S.PointTop\n\t\t\t\t\tclassName=\"point\"\n\t\t\t\t\tonMouseLeave={() => {\n\t\t\t\t\t\tthis.setState({ selected: false });\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tthis.setState({ selected: true });\n\t\t\t\t\t}}\n\t\t\t\t\tdata-id={point.getID()}\n\t\t\t\t\tdata-linkid={point.getLink().getID()}\n\t\t\t\t\tcx={point.getPosition().x}\n\t\t\t\t\tcy={point.getPosition().y}\n\t\t\t\t\tr={15}\n\t\t\t\t\topacity={0.0}\n\t\t\t\t/>\n\t\t\t</g>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DefaultLinkModel } from './DefaultLinkModel';\nimport { DefaultLinkWidget } from './DefaultLinkWidget';\nimport styled from '@emotion/styled';\nimport { AbstractReactFactory } from '@fjdr/react-canvas-core';\nimport { DiagramEngine } from '@fjdr/react-diagrams-core';\nimport { css, keyframes } from '@emotion/react';\n\nnamespace S {\n\texport const Keyframes = keyframes`\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t`;\n\n\tconst selected = css`\n\t\tstroke-dasharray: 10, 2;\n\t\tanimation: ${Keyframes} 1s linear infinite;\n\t`;\n\n\texport const Path = styled.path<{ selected: boolean }>`\n\t\t${(p) => p.selected && selected};\n\t\tfill: none;\n\t\tpointer-events: auto;\n\t`;\n}\n\nexport class DefaultLinkFactory<Link extends DefaultLinkModel = DefaultLinkModel> extends AbstractReactFactory<\n\tLink,\n\tDiagramEngine\n> {\n\tconstructor(type = 'default') {\n\t\tsuper(type);\n\t}\n\n\tgenerateReactWidget(event): JSX.Element {\n\t\treturn <DefaultLinkWidget link={event.model} diagramEngine={this.engine} />;\n\t}\n\n\tgenerateModel(event): Link {\n\t\treturn new DefaultLinkModel() as Link;\n\t}\n\n\tgenerateLinkSegment(model: Link, selected: boolean, path: string) {\n\t\treturn (\n\t\t\t<S.Path\n\t\t\t\tselected={selected}\n\t\t\t\tstroke={selected ? model.getOptions().selectedColor : model.getOptions().color}\n\t\t\t\tstrokeWidth={model.getOptions().width}\n\t\t\t\td={path}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DiagramEngine, PortWidget } from '@fjdr/react-diagrams-core';\nimport { DefaultPortModel } from './DefaultPortModel';\nimport styled from '@emotion/styled';\nimport { Triangle, Rhombus, Round } from './PortIcon';\n\nexport interface DefaultPortLabelProps {\n\tport: DefaultPortModel;\n\tengine: DiagramEngine;\n}\n\nnamespace S {\n\texport const PortLabel = styled.div`\n\t\tdisplay: flex;\n\t\tmargin-top: 1px;\n\t\talign-items: center;\n\t`;\n\n\texport const Label = styled.div`\n\t\tpadding: 0 5px;\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\n\t\tinput {\n\t\t\tbackground-color: 'white';\n\t\t\tborder: none;\n\t\t\toutline: none;\n\t\t\tpadding: 8px;\n\t\t\tfont-size: 14px;\n\t\t\tcolor: black;\n\t\t\twidth: 100%;\n\t\t\tcursor: text;\n\t\t}\n\t`;\n\n\texport const Port = styled.div<{ isIn: boolean }>`\n\t\twidth: 15px;\n\t\theight: 15px;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\t${({ isIn }) => (!isIn ? 'margin-right: 5px;' : 'margin-left: 5px;')}\n\t\t&:hover {\n\t\t\tbackground: rgb(192, 255, 0);\n\t\t}\n\t`;\n}\n\ninterface DefaultPortState {\n\tportName: string;\n\tinputWidth: string;\n}\nexport class DefaultPortLabel extends React.Component<DefaultPortLabelProps, DefaultPortState> {\n\tconstructor(props: DefaultPortLabelProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tportName: props.port.getOptions().name,\n\t\t\tinputWidth: this.calculateInputWidth(props.port.getOptions().name)\n\t\t};\n\t}\n\n\tcalculateInputWidth = (value: string): string => {\n\t\t// Estimate the width of the input based on the length of the text\n\t\t// Adjust the multiplier (e.g., 8) based on your font size and padding\n\t\treturn (value.length + 1) * 8 + 'px';\n\t};\n\n\thandleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n\t\tconst newName = event.target.value;\n\t\tthis.setState({\n\t\t\tportName: newName,\n\t\t\tinputWidth: this.calculateInputWidth(newName)\n\t\t});\n\t\tthis.props.port.setLabel(newName);\n\t};\n\n\trenderPortIcon = (icon: string, color: string) => {\n\t\tswitch (icon) {\n\t\t\tcase 'triangle':\n\t\t\t\treturn <Triangle color={color} />;\n\t\t\tcase 'rhombus':\n\t\t\t\treturn <Rhombus color={color} />;\n\t\t\tcase 'round':\n\t\t\t\treturn <Round color={color} />;\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t};\n\n\trender() {\n\t\tconst port = (\n\t\t\t<PortWidget engine={this.props.engine} port={this.props.port}>\n\t\t\t\t<S.Port isIn={this.props.port.getOptions().in}>\n\t\t\t\t\t{this.renderPortIcon(this.props.port.getOptions().icon, this.props.port.getOptions().icon_color)}\n\t\t\t\t</S.Port>\n\t\t\t</PortWidget>\n\t\t);\n\t\tconst label = (\n\t\t\t<S.Label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={this.props.port.getOptions().label}\n\t\t\t\t\tonChange={this.handleNameChange}\n\t\t\t\t\tonFocus={() => this.props.engine.getModel().setEdited(true)}\n\t\t\t\t\tonBlur={() => this.props.engine.getModel().setEdited(false)}\n\t\t\t\t\treadOnly\n\t\t\t\t/>\n\t\t\t</S.Label>\n\t\t);\n\n\t\treturn (\n\t\t\t<S.PortLabel>\n\t\t\t\t{this.props.port.getOptions().in ? port : label}\n\t\t\t\t{this.props.port.getOptions().in ? label : port}\n\t\t\t</S.PortLabel>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport _map from 'lodash/map';\nimport { DiagramEngine } from '@fjdr/react-diagrams-core';\nimport { DefaultNodeModel } from './DefaultNodeModel';\nimport { DefaultPortLabel } from '../port/DefaultPortLabelWidget';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Node = styled.div<{ background: string; selected: boolean; shape: string }>`\n\t\tbackground-color: ${(p) => p.background};\n\t\tborder-radius: ${(p) => (p.shape === 'true' ? '16px' : 'unset')};\n\t\tfont-family: sans-serif;\n\t\tcolor: white;\n\t\toverflow: visible;\n\t\tfont-size: 14px;\n\t\tline-height: 20px;\n\t\tpadding: 10px;\n\t\twidth: 203px;\n\t`;\n\n\texport const Title = styled.div`\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\tjustify-items: center;\n\t`;\n\texport const Icon = styled.div`\n\t\tpadding: 8px;\n\t`;\n\n\texport const TitleWrapper = styled.div<{ background: string }>`\n\t\tflex-grow: 1;\n\t\tpadding: 5px 5px;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tinput {\n\t\t\tbackground-color: ${(p) => p.background};\n\t\t\tborder: none;\n\t\t\toutline: none;\n\t\t\tpadding-left: 5px;\n\t\t\tcolor: white;\n\t\t\tcursor: text;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t`;\n\n\texport const TitleName = styled.div`\n\t\tinput {\n\t\t\tfont-size: 14px;\n\t\t\tfont-weight: bold;\n\t\t}\n\t`;\n\n\texport const Ports = styled.div`\n\t\tdisplay: flex;\n\t\tbackground-color: white;\n\t\tborder-radius: 8px;\n\t`;\n\n\texport const PortsContainer = styled.div<{ isIn: boolean }>`\n\t\tmax-width: 50%;\n\t\tflex-basis: 50%;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: ${(p) => (p.isIn ? 'flex-start' : 'flex-end')};\n\t\t&:first-of-type {\n\t\t\tmargin-right: 10px;\n\t\t}\n\n\t\t&:only-child {\n\t\t\tmargin-right: 0px;\n\t\t}\n\t`;\n\n\texport const InputWrapper = styled.div`\n\t\tposition: relative;\n\n\t\t&:before {\n\t\t\tcontent: attr(data-tooltip);\n\t\t\tposition: absolute;\n\t\t\tbottom: 100%;\n\t\t\tleft: 0;\n\t\t\tpadding: 5px 10px;\n\t\t\tbackground: rgba(0, 0, 0, 0.8);\n\t\t\tcolor: white;\n\t\t\tborder-radius: 4px;\n\t\t\tfont-size: 12px;\n\t\t\tmax-width: 178px;\n\t\t\topacity: 0;\n\t\t\tvisibility: hidden;\n\t\t\ttransition: opacity 0.2s;\n\t\t\tpointer-events: none;\n\t\t\tz-index: 1000;\n\t\t\tmargin-bottom: 5px;\n\t\t\tmax-width: 300px;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\n\t\t\tdisplay: -webkit-box;\n\t\t\t-webkit-line-clamp: 3;\n\t\t\t-webkit-box-orient: vertical;\n\t\t\tline-height: 1.4;\n\t\t\tmax-height: calc(1.4em * 3);\n\t\t\tword-break: break-word;\n\t\t}\n\n\t\t&:hover:before {\n\t\t\topacity: 1;\n\t\t\tvisibility: visible;\n\t\t\ttransition-delay: 2s;\n\t\t}\n\t`;\n\n\texport const SelectionBox = styled.div`\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tpointer-events: none;\n\n\t\t// Border trên\n\t\t.border-top {\n\t\t\tposition: absolute;\n\t\t\ttop: -4px;\n\t\t\tleft: -2px;\n\t\t\tright: -2px;\n\t\t\theight: 1px;\n\t\t\tbackground: #ff5722;\n\t\t}\n\n\t\t// Border phải\n\t\t.border-right {\n\t\t\tposition: absolute;\n\t\t\ttop: -2px;\n\t\t\tright: -4px;\n\t\t\tbottom: -2px;\n\t\t\twidth: 1px;\n\t\t\tbackground: #ff5722;\n\t\t}\n\n\t\t// Border dưới\n\t\t.border-bottom {\n\t\t\tposition: absolute;\n\t\t\tbottom: -4px;\n\t\t\tleft: -2px;\n\t\t\tright: -2px;\n\t\t\theight: 1px;\n\t\t\tbackground: #ff5722;\n\t\t}\n\n\t\t// Border trái\n\t\t.border-left {\n\t\t\tposition: absolute;\n\t\t\ttop: -2px;\n\t\t\tleft: -4px;\n\t\t\tbottom: -2px;\n\t\t\twidth: 1px;\n\t\t\tbackground: #ff5722;\n\t\t}\n\n\t\t// Style cho 4 điểm góc\n\t\t.corner {\n\t\t\tposition: absolute;\n\t\t\twidth: 4px;\n\t\t\theight: 4px;\n\t\t\tbackground: transparent;\n\t\t\tborder: 1px solid #ff5722;\n\t\t\tborder-radius: 50%;\n\n\t\t\t&.top-left {\n\t\t\t\ttop: -4px;\n\t\t\t\tleft: -4px;\n\t\t\t\ttransform: translate(-50%, -50%);\n\t\t\t}\n\n\t\t\t&.top-right {\n\t\t\t\ttop: -4px;\n\t\t\t\tright: -4px;\n\t\t\t\ttransform: translate(50%, -50%);\n\t\t\t}\n\n\t\t\t&.bottom-left {\n\t\t\t\tbottom: -4px;\n\t\t\t\tleft: -4px;\n\t\t\t\ttransform: translate(-50%, 50%);\n\t\t\t}\n\n\t\t\t&.bottom-right {\n\t\t\t\tbottom: -4px;\n\t\t\t\tright: -4px;\n\t\t\t\ttransform: translate(50%, 50%);\n\t\t\t}\n\t\t}\n\t`;\n}\n\nexport interface DefaultNodeProps {\n\tnode: DefaultNodeModel;\n\tengine: DiagramEngine;\n}\n\ninterface DefaultNodeState {\n\tnodeName: string;\n\tsubTitle?: string;\n\tinputWidth: string;\n}\n\nexport class DefaultNodeWidget extends React.Component<DefaultNodeProps, DefaultNodeState> {\n\tconstructor(props: DefaultNodeProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnodeName: props.node.getOptions().name,\n\t\t\tsubTitle: props.node.getOptions().sub,\n\t\t\tinputWidth: this.calculateInputWidth(props.node.getOptions().name)\n\t\t};\n\t}\n\n\tcalculateInputWidth = (value: string): string => {\n\t\t// Estimate the width of the input based on the length of the text\n\t\t// Adjust the multiplier (e.g., 8) based on your font size and padding\n\t\treturn (value.length + 1) * 8 + 'px';\n\t};\n\n\thandleNameChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n\t\tconst newName = event.target.value;\n\t\tthis.setState({\n\t\t\tnodeName: newName,\n\t\t\tinputWidth: this.calculateInputWidth(newName)\n\t\t});\n\t\tthis.props.node.setName(newName);\n\t};\n\n\thandleChangeSub = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst subTitle = event.target.value;\n\t\tthis.setState({\n\t\t\tsubTitle: subTitle\n\t\t});\n\t\tthis.props.node.changeOptions('sub', subTitle);\n\t};\n\n\tgeneratePort = (port: any): JSX.Element => {\n\t\t// TODO: fix to port available\n\t\treturn <DefaultPortLabel engine={this.props.engine} port={port} key={port.getID()} />;\n\t};\n\n\trender() {\n\t\tconst shape = this.props.node.getShape();\n\n\t\treturn (\n\t\t\t<S.Node\n\t\t\t\tdata-default-node-name={this.props.node.getOptions().name}\n\t\t\t\tselected={this.props.node.isSelected()}\n\t\t\t\tbackground={this.props.node.getOptions().color}\n\t\t\t\tshape={shape.toString()}\n\t\t\t>\n\t\t\t\t<div className=\"border-bottom\" />\n\t\t\t\t<div className=\"border-left\" />\n\t\t\t\t<div className=\"corner top-left\" />\n\t\t\t\t<div className=\"corner top-right\" />\n\t\t\t\t<div className=\"corner bottom-left\" />\n\t\t\t\t<div className=\"corner bottom-right\" />\n\t\t\t\t<S.Title>\n\t\t\t\t\t{this.props.node.getOptions().icon && <S.Icon>{this.props.node.getOptions().icon}</S.Icon>}\n\t\t\t\t\t<S.TitleWrapper background={this.props.node.getOptions().color}>\n\t\t\t\t\t\t<S.TitleName>\n\t\t\t\t\t\t\t<S.InputWrapper data-tooltip={this.props.node.getOptions().name}>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={this.props.node.getOptions().name}\n\t\t\t\t\t\t\t\t\tonChange={this.handleNameChange}\n\t\t\t\t\t\t\t\t\tonFocus={() => this.props.engine.getModel().setEdited(true)}\n\t\t\t\t\t\t\t\t\tonBlur={() => this.props.engine.getModel().setEdited(false)}\n\t\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</S.InputWrapper>\n\t\t\t\t\t\t</S.TitleName>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<S.InputWrapper data-tooltip={this.props.node.getOptions().sub}>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={this.props.node.getOptions().sub}\n\t\t\t\t\t\t\t\t\tonChange={this.handleChangeSub}\n\t\t\t\t\t\t\t\t\tonFocus={() => this.props.engine.getModel().setEdited(true)}\n\t\t\t\t\t\t\t\t\tonBlur={() => this.props.engine.getModel().setEdited(false)}\n\t\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</S.InputWrapper>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</S.TitleWrapper>\n\t\t\t\t</S.Title>\n\t\t\t\t<S.Ports>\n\t\t\t\t\t<S.PortsContainer isIn={true}>{_map(this.props.node.getInPorts(), this.generatePort)}</S.PortsContainer>\n\t\t\t\t\t<S.PortsContainer isIn={false}>{_map(this.props.node.getOutPorts(), this.generatePort)}</S.PortsContainer>\n\t\t\t\t</S.Ports>\n\t\t\t\t{this.props.node.isSelected() && (\n\t\t\t\t\t<S.SelectionBox>\n\t\t\t\t\t\t<div className=\"border-top\" />\n\t\t\t\t\t\t<div className=\"border-right\" />\n\t\t\t\t\t\t<div className=\"border-bottom\" />\n\t\t\t\t\t\t<div className=\"border-left\" />\n\t\t\t\t\t\t<div className=\"corner top-left\" />\n\t\t\t\t\t\t<div className=\"corner top-right\" />\n\t\t\t\t\t\t<div className=\"corner bottom-left\" />\n\t\t\t\t\t\t<div className=\"corner bottom-right\" />\n\t\t\t\t\t</S.SelectionBox>\n\t\t\t\t)}\n\t\t\t</S.Node>\n\t\t);\n\t}\n}\n"],"names":[],"sourceRoot":""}