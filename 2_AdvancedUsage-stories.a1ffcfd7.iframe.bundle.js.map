{"version":3,"file":"2_AdvancedUsage-stories.a1ffcfd7.iframe.bundle.js","mappings":";;;;;;AAYA;;;;;ACIA;;;;AAIA;;;;;ACSA;;;;;;;;;AAWA;;;AAKA;;;AAGA;;;;;;;;;;;ACjBA;;;;ACjBA;;;AAKA;;;;;;;AAUA;;;;;;;;;;;;;;AAgBA","sources":["webpack://@fjdr/react-diagrams-gallery/./demos/demo-drag-and-drop/components/TrayWidget.tsx","webpack://@fjdr/react-diagrams-gallery/./demos/demo-drag-and-drop/components/TrayItemWidget.tsx","webpack://@fjdr/react-diagrams-gallery/./demos/demo-drag-and-drop/components/BodyWidget.tsx","webpack://@fjdr/react-diagrams-gallery/./demos/demo-custom-node1/DiamondNodeWidget.tsx","webpack://@fjdr/react-diagrams-gallery/./demos/helpers/DemoWorkspaceWidget.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Tray = styled.div`\n\t\tmin-width: 300px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t`;\n}\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <S.Tray>{this.props.children}</S.Tray>;\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n\ticon?: any;\n}\n\nnamespace S {\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin: 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-bottom: 2px;\n\t\tcursor: pointer;\n\t`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Tray\n\t\t\t\tcolor={this.props.color}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\"\n\t\t\t>\n\t\t\t\t{this.props.name}\n\t\t\t</S.Tray>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport _keys from 'lodash/keys';\nimport _forEach from 'lodash/forEach';\nimport { TrayWidget } from './TrayWidget';\nimport { action } from '@storybook/addon-actions';\nimport * as beautify from 'json-beautify';\nimport { Application, customTypes } from '../Application';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport { DefaultNodeModel, DefaultPortModel, GroupModel } from '@fjdr/react-diagrams';\nimport { CanvasWidget } from '@fjdr/react-canvas-core';\nimport { DemoCanvasWidget } from '../../helpers/DemoCanvasWidget';\nimport styled from '@emotion/styled';\nimport { DiamondNodeModel } from '../../demo-custom-node1/DiamondNodeModel';\nimport { RiStoreLine } from 'react-icons/ri';\nimport { FaCaretRight } from 'react-icons/fa6';\nimport { PropertiesTray } from './PropertiesTray';\nimport { DemoButton } from '../../helpers/DemoWorkspaceWidget';\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nnamespace S {\n\texport const Body = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 100%;\n\t`;\n\n\texport const Header = styled.div`\n\t\tdisplay: flex;\n\t\tbackground: rgb(30, 30, 30);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial, sans-serif;\n\t\tpadding: 10px;\n\t\talign-items: center;\n\t`;\n\n\texport const Content = styled.div`\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t`;\n\n\texport const Layer = styled.div`\n\t\tposition: relative;\n\t\tflex-grow: 1;\n\t`;\n}\ninterface State {\n\tselected: any;\n}\nexport class BodyWidget extends React.Component<BodyWidgetProps, State> {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselected: null\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\t// Register listener for selection on the model\n\t\tthis.props.app\n\t\t\t.getDiagramEngine()\n\t\t\t.getModel()\n\t\t\t.getNodes()\n\t\t\t.forEach((node) => {\n\t\t\t\tnode.registerListener({\n\t\t\t\t\teventDidFire: (event) => {\n\t\t\t\t\t\tthis.setState({ selected: event });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t}\n\tcomponentDidUpdate() {\n\t\t// Register listener for selection on the model\n\t\tthis.props.app\n\t\t\t.getDiagramEngine()\n\t\t\t.getModel()\n\t\t\t.getNodes()\n\t\t\t.forEach((node) => {\n\t\t\t\tnode.registerListener({\n\t\t\t\t\teventDidFire: (event) => {\n\t\t\t\t\t\tthis.setState({ selected: event });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t}\n\tupdate() {\n\t\tthis.forceUpdate();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<S.Body>\n\t\t\t\t<S.Header>\n\t\t\t\t\t<div className=\"title\">Storm React Diagrams - DnD demo</div>\n\t\t\t\t\t<DemoButton\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\taction('Serialized Graph')(\n\t\t\t\t\t\t\t\tbeautify(this.props.app.getDiagramEngine().getModel().serialize(), null, 2, 80)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tSerialize Graph\n\t\t\t\t\t</DemoButton>\n\t\t\t\t</S.Header>\n\t\t\t\t<S.Content>\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'in' }} name=\"In Node\" color=\"#B692F6\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'out' }} name=\"Out Node\" color=\"#25AAD0\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'two_port' }} name=\"In/Out Node\" color=\"#167646\" />\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<S.Layer\n\t\t\t\t\t\tonDrop={(event) => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t\tvar nodesCount = _keys(this.props.app.getDiagramEngine().getModel().getNodes()).length;\n\n\t\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t\tif (data.type === 'in') {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel({\n\t\t\t\t\t\t\t\t\tname: 'Node ' + (nodesCount + 1),\n\t\t\t\t\t\t\t\t\tshape: true,\n\t\t\t\t\t\t\t\t\tcolor: '#B692F6'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tnode.addOutPort('Out 1');\n\t\t\t\t\t\t\t\tnode.addOutPort('Out 2');\n\t\t\t\t\t\t\t\tnode.addInPort('In');\n\t\t\t\t\t\t\t} else if (customTypes.includes(data.type)) {\n\t\t\t\t\t\t\t\tnode = new DiamondNodeModel(data.type);\n\t\t\t\t\t\t\t} else if (data.type === 'two_port') {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel('Node ' + (nodesCount + 1), '#167646');\n\t\t\t\t\t\t\t\tconst port1 = new DefaultPortModel({\n\t\t\t\t\t\t\t\t\tname: 'In',\n\t\t\t\t\t\t\t\t\tin: true,\n\t\t\t\t\t\t\t\t\ticon: 'rhombus',\n\t\t\t\t\t\t\t\t\ticon_color: '#167646'\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tnode.addPort(port1);\n\t\t\t\t\t\t\t\tnode.addOutPort('Out');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel({ name: 'Node ' + (nodesCount + 1), shape: true, color: '#25AAD0' });\n\t\t\t\t\t\t\t\tnode.addOutPort('Out');\n\t\t\t\t\t\t\t\tnode.addOutPort('Out 1');\n\t\t\t\t\t\t\t\tnode.addOutPort('Out 2');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\t\tconst mouseElement = this.props.app.getDiagramEngine().getMouseElement(event);\n\t\t\t\t\t\t\tif (mouseElement instanceof GroupModel) {\n\t\t\t\t\t\t\t\tmouseElement.addNode(node);\n\t\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={(event) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DemoCanvasWidget>\n\t\t\t\t\t\t\t<CanvasWidget engine={this.props.app.getDiagramEngine()} />\n\t\t\t\t\t\t</DemoCanvasWidget>\n\t\t\t\t\t</S.Layer>\n\n\t\t\t\t\t{this.state.selected && (\n\t\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t\t<PropertiesTray\n\t\t\t\t\t\t\t\telement={this.state.selected}\n\t\t\t\t\t\t\t\tengine={this.props.app.getDiagramEngine()}\n\t\t\t\t\t\t\t\tonClose={() => {\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().clearSelection();\n\t\t\t\t\t\t\t\t\tthis.setState({ selected: null });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t)}\n\t\t\t\t</S.Content>\n\t\t\t</S.Body>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { DiamondNodeModel } from './DiamondNodeModel';\nimport { DiagramEngine, PortModelAlignment, PortWidget } from '@fjdr/react-diagrams';\nimport styled from '@emotion/styled';\n\nexport interface DiamondNodeWidgetProps {\n\tnode: DiamondNodeModel;\n\tengine: DiagramEngine;\n\tsize?: number;\n\twidth?: number;\n\theight?: number;\n}\n\nnamespace S {\n\texport const Port = styled.div`\n\t\twidth: 16px;\n\t\theight: 16px;\n\t\tz-index: 10;\n\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\tborder-radius: 8px;\n\t\tcursor: pointer;\n\n\t\t&:hover {\n\t\t\tbackground: rgba(0, 0, 0, 1);\n\t\t}\n\t`;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DiamondNodeWidget extends React.Component<DiamondNodeWidgetProps> {\n\trenderComponentByType(type) {\n\t\tswitch (type) {\n\t\t\tcase 'diamond':\n\t\t\t\treturn (\n\t\t\t\t\t<svg\n\t\t\t\t\t\twidth={this.props.size}\n\t\t\t\t\t\theight={this.props.size}\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t\t__html:\n\t\t\t\t\t\t\t\t` <g id=\"Layer_1\">\n          </g>\n          <g id=\"Layer_2\">\n\t\t\t\t\t\t<polygon fill=\"mediumpurple\" stroke=\"${\n\t\t\t\t\t\t\tthis.props.node.isSelected() ? 'white' : '#000000'\n\t\t\t\t\t\t}\" stroke-width=\"3\" stroke-miterlimit=\"10\" points=\"10,` +\n\t\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t\t` ` +\n\t\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t\t`,10 ` +\n\t\t\t\t\t\t\t\t(this.props.size - 10) +\n\t\t\t\t\t\t\t\t`,` +\n\t\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t\t` ` +\n\t\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t\t`,` +\n\t\t\t\t\t\t\t\t(this.props.size - 10) +\n\t\t\t\t\t\t\t\t` \"/>\n          </g>`\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\tcase 'circle':\n\t\t\t\treturn (\n\t\t\t\t\t<svg\n\t\t\t\t\t\twidth={this.props.size}\n\t\t\t\t\t\theight={this.props.size}\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t\t__html: `<g id=\"Layer_1\">\n\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t<g id=\"Layer_2\">\n\t\t\t\t\t\t\t<circle r=${this.props.size / 2 - 5} cx=${this.props.size / 2} cy=${this.props.size / 2} stroke=\"${\n\t\t\t\t\t\t\t\tthis.props.node.isSelected() ? 'white' : '#000000'\n\t\t\t\t\t\t\t}\" stroke-width=\"5\" fill=\"whitesmoke\" stroke-miterlimit=\"10\"/>\n\t\t\t\t\t\t\t</g>`\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\tcase 'ellipse':\n\t\t\t\treturn (\n\t\t\t\t\t<svg\n\t\t\t\t\t\twidth={this.props.width}\n\t\t\t\t\t\theight={this.props.height}\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t\t__html: `<g id=\"Layer_1\">\n\t\t\t\t\t\t\t</g>\n\t\t\t\t\t\t\t<g id=\"Layer_2\">\n\t\t\t\t\t\t\t<ellipse cx=${this.props.width / 2}  cy=${this.props.height / 2}  rx=${this.props.width / 2 - 5} ry=${\n\t\t\t\t\t\t\t\tthis.props.height / 2 - 5\n\t\t\t\t\t\t\t} stroke=\"${\n\t\t\t\t\t\t\t\tthis.props.node.isSelected() ? 'white' : '#000000'\n\t\t\t\t\t\t\t}\" stroke-width=\"5\" fill=\"lightcyan\" stroke-miterlimit=\"10\"/>\n\t\t\t\t\t\t\t</g>`\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\treturn '';\n\t\t}\n\t}\n\n\trenderDefaultPorts(type) {\n\t\tif (type === 'diamond' || type === 'circle') {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<PortWidget\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\ttop: this.props.size / 2 - 8,\n\t\t\t\t\t\t\tleft: -4,\n\t\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.LEFT)}\n\t\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t\t>\n\t\t\t\t\t\t<S.Port />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t\t<PortWidget\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: this.props.size / 2 - 8,\n\t\t\t\t\t\t\ttop: -4,\n\t\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.TOP)}\n\t\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t\t>\n\t\t\t\t\t\t<S.Port />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t\t<PortWidget\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: this.props.size - 14,\n\t\t\t\t\t\t\ttop: this.props.size / 2 - 8,\n\t\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.RIGHT)}\n\t\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t\t>\n\t\t\t\t\t\t<S.Port />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t\t<PortWidget\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: this.props.size / 2 - 8,\n\t\t\t\t\t\t\ttop: this.props.size - 14,\n\t\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.BOTTOM)}\n\t\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t\t>\n\t\t\t\t\t\t<S.Port />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t</>\n\t\t\t);\n\t\t} else if (type === 'ellipse') {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{/* <PortWidget\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\ttop: this.props.height / 2 - 8,\n\t\t\t\t\t\t\tleft: -4,\n\t\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.LEFT)}\n\t\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t\t>\n\t\t\t\t\t\t<S.Port />\n\t\t\t\t\t</PortWidget> */}\n\t\t\t\t\t<PortWidget\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: this.props.width / 2 - 8,\n\t\t\t\t\t\t\ttop: -2,\n\t\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.TOP)}\n\t\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t\t>\n\t\t\t\t\t\t<S.Port />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t\t{/* <PortWidget\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: this.props.width - 10,\n\t\t\t\t\t\t\ttop: this.props.height / 2 - 8,\n\t\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.RIGHT)}\n\t\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t\t>\n\t\t\t\t\t\t<S.Port />\n\t\t\t\t\t</PortWidget> */}\n\t\t\t\t\t<PortWidget\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: this.props.width / 2 - 8,\n\t\t\t\t\t\t\ttop: this.props.height - 12,\n\t\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.BOTTOM)}\n\t\t\t\t\t\tengine={this.props.engine}\n\t\t\t\t\t>\n\t\t\t\t\t\t<S.Port />\n\t\t\t\t\t</PortWidget>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst type = this.props.node.getType();\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={'diamond-node'}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\twidth: this.props.size,\n\t\t\t\t\theight: this.props.size\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.renderComponentByType(type)}\n\t\t\t\t{this.renderDefaultPorts(type)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface DemoWorkspaceWidgetProps {\n\tbuttons?: any;\n}\n\nnamespace S {\n\texport const Toolbar = styled.div`\n\t\tpadding: 5px;\n\t\tdisplay: flex;\n\t\tflex-shrink: 0;\n\t`;\n\n\texport const Content = styled.div`\n\t\tflex-grow: 1;\n\t\theight: 100%;\n\t`;\n\n\texport const Container = styled.div`\n\t\tbackground: black;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\theight: 100%;\n\t\tborder-radius: 5px;\n\t\toverflow: hidden;\n\t`;\n}\n\nexport const DemoButton = styled.button`\n\tbackground: rgb(60, 60, 60);\n\tfont-size: 14px;\n\tpadding: 5px 10px;\n\tborder: none;\n\tcolor: white;\n\toutline: none;\n\tcursor: pointer;\n\tmargin: 2px;\n\tborder-radius: 3px;\n\n\t&:hover {\n\t\tbackground: rgb(0, 192, 255);\n\t}\n`;\n\nexport class DemoWorkspaceWidget extends React.Component<React.PropsWithChildren<DemoWorkspaceWidgetProps>> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Container>\n\t\t\t\t<S.Toolbar>{this.props.buttons}</S.Toolbar>\n\t\t\t\t<S.Content>{this.props.children}</S.Content>\n\t\t\t</S.Container>\n\t\t);\n\t}\n}\n"],"names":[],"sourceRoot":""}